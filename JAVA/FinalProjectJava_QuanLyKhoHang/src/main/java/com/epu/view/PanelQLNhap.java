/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.epu.view;

import com.epu.controller.AccountController;
import com.epu.controller.ProductController;
import com.epu.controller.ShelfController;
import com.epu.controller.SupplierController;
import com.epu.controller.TransactionController;
import com.epu.controller.TransactionDetailController;
import com.epu.controller.WareHouseController;
import com.epu.model.Account;
import com.epu.model.DateLabelFormatter;
import com.epu.model.Product;
import com.epu.model.SessionManager;
import com.epu.model.Shelf;
import com.epu.model.Transaction;
import com.epu.model.TransactionDetail;
import com.epu.model.WareHouse;
import java.awt.CardLayout;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;

/**
 *
 * @author ASUS
 */
public class PanelQLNhap extends javax.swing.JPanel {
    private Account acc = new AccountController().getAccountById(SessionManager.getInstance().getAccountId());
    private JDatePickerImpl datePicker;
    
    
    
    
    public PanelQLNhap() {
        initComponents();
        fillDataTable(new TransactionController().getAll());
        fillDataTableProduct();
        setupTableChoosen();
        fillDataCbboxSupplier();
        addDatePickerComponent();
        txtAccountName.setText(acc.getAccountName());
        txtAccountName.setEnabled(false);
        fillDataCbboxSuppierInDefaultPanel();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainLayout = new javax.swing.JPanel();
        defaultLayout = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        tableTransaction = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        btnPageInsert = new javax.swing.JButton();
        btnPageDetail = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnUpdateTransaction = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        panelDefault_cbboxSupplier = new javax.swing.JComboBox<>();
        panelDefault_txtBatchNumber = new javax.swing.JTextField();
        panelDefault_txtTransactionType = new javax.swing.JTextField();
        panelDefault_txtAccount = new javax.swing.JTextField();
        panelDefault_txtTotal = new javax.swing.JTextField();
        datePickerCreateDateTransactionPanel = new javax.swing.JPanel();
        detailLayout = new javax.swing.JPanel();
        btnBackMainLayout = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableTransactionDetailByTranId = new javax.swing.JTable();
        btnInsertTranDetail = new javax.swing.JButton();
        btnUpdateTranDetail = new javax.swing.JButton();
        btnDeleteTranDetail = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        panelTranDetail_txtTransactionId = new javax.swing.JTextField();
        panelTranDetail_txtQuantity = new javax.swing.JTextField();
        panelTranDetail_cbboxWareHouse = new javax.swing.JComboBox<>();
        panelTranDetail_cbboxShelf = new javax.swing.JComboBox<>();
        panelTranDetail_cbboxProduct = new javax.swing.JComboBox<>();
        panelTranDetail_cbboxStatus = new javax.swing.JComboBox<>();
        editPanel = new javax.swing.JPanel();
        btnBackLayout = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cbboxSupplier = new javax.swing.JComboBox<>();
        txtAccountName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtBatchNumber = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableChoosenProduct = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableDanhSachSP = new javax.swing.JTable();
        btnAddTransaction_TransactionDetail = new javax.swing.JButton();
        btnChonSPThemVaoDS = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        mainLayout.setPreferredSize(new java.awt.Dimension(1195, 645));
        mainLayout.setLayout(new java.awt.CardLayout());

        scrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Danh sách Transaction"));

        tableTransaction.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableTransaction.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTransactionMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(tableTransaction);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Chức năng"));

        btnPageInsert.setText("Insert");
        btnPageInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPageInsertActionPerformed(evt);
            }
        });

        btnPageDetail.setText("Detail");
        btnPageDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPageDetailActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdateTransaction.setText("Update");
        btnUpdateTransaction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTransactionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(btnPageInsert)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                .addComponent(btnPageDetail)
                .addGap(75, 75, 75)
                .addComponent(btnUpdateTransaction)
                .addGap(71, 71, 71)
                .addComponent(btnDelete)
                .addGap(71, 71, 71))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPageInsert)
                    .addComponent(btnPageDetail)
                    .addComponent(btnDelete)
                    .addComponent(btnUpdateTransaction))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Transaction Field"));

        jLabel9.setText("Supplier :");

        jLabel11.setText("BatchNumber :");

        jLabel12.setText("TransactionType :");

        jLabel13.setText("CreateDate :");

        jLabel14.setText("AccountId :");

        jLabel15.setText("Total :");

        javax.swing.GroupLayout datePickerCreateDateTransactionPanelLayout = new javax.swing.GroupLayout(datePickerCreateDateTransactionPanel);
        datePickerCreateDateTransactionPanel.setLayout(datePickerCreateDateTransactionPanelLayout);
        datePickerCreateDateTransactionPanelLayout.setHorizontalGroup(
            datePickerCreateDateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        datePickerCreateDateTransactionPanelLayout.setVerticalGroup(
            datePickerCreateDateTransactionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 34, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel14)
                    .addComponent(jLabel13)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel12)
                        .addComponent(jLabel9, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelDefault_cbboxSupplier, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDefault_txtBatchNumber)
                    .addComponent(panelDefault_txtTransactionType)
                    .addComponent(panelDefault_txtAccount)
                    .addComponent(panelDefault_txtTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                    .addComponent(datePickerCreateDateTransactionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(95, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(panelDefault_cbboxSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel9))
                                .addGap(59, 59, 59))
                            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(panelDefault_txtBatchNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel11)))
                        .addGap(36, 36, 36)
                        .addComponent(jLabel12))
                    .addComponent(panelDefault_txtTransactionType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(datePickerCreateDateTransactionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(panelDefault_txtAccount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel14)))
                .addGap(29, 29, 29)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15)
                    .addComponent(panelDefault_txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout defaultLayoutLayout = new javax.swing.GroupLayout(defaultLayout);
        defaultLayout.setLayout(defaultLayoutLayout);
        defaultLayoutLayout.setHorizontalGroup(
            defaultLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultLayoutLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(defaultLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        defaultLayoutLayout.setVerticalGroup(
            defaultLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(defaultLayoutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(defaultLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 428, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(73, Short.MAX_VALUE))
        );

        mainLayout.add(defaultLayout, "defaultPanel");

        detailLayout.setBackground(new java.awt.Color(255, 255, 255));

        btnBackMainLayout.setText("Back");
        btnBackMainLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackMainLayoutActionPerformed(evt);
            }
        });

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Danh sách TransactionDetails"));

        tableTransactionDetailByTranId.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableTransactionDetailByTranId.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableTransactionDetailByTranIdMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tableTransactionDetailByTranId);

        btnInsertTranDetail.setText("Insert");
        btnInsertTranDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertTranDetailActionPerformed(evt);
            }
        });

        btnUpdateTranDetail.setText("Update");
        btnUpdateTranDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateTranDetailActionPerformed(evt);
            }
        });

        btnDeleteTranDetail.setText("Delete");
        btnDeleteTranDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTranDetailActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "TransactionDetail Field"));

        jLabel1.setText("TransacionId :");

        jLabel5.setText("WareHouse :");

        jLabel6.setText("Shelf :");

        jLabel7.setText("Product :");

        jLabel8.setText("Quanity :");

        jLabel10.setText("Status :");

        panelTranDetail_cbboxWareHouse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panelTranDetail_cbboxWareHouseActionPerformed(evt);
            }
        });

        panelTranDetail_cbboxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "False", "True" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel8)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(panelTranDetail_txtTransactionId)
                    .addComponent(panelTranDetail_cbboxProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelTranDetail_cbboxShelf, 0, 220, Short.MAX_VALUE)
                    .addComponent(panelTranDetail_cbboxWareHouse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelTranDetail_txtQuantity)
                    .addComponent(panelTranDetail_cbboxStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(panelTranDetail_txtTransactionId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(panelTranDetail_cbboxWareHouse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTranDetail_cbboxShelf, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTranDetail_cbboxProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelTranDetail_txtQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(panelTranDetail_cbboxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44))
        );

        javax.swing.GroupLayout detailLayoutLayout = new javax.swing.GroupLayout(detailLayout);
        detailLayout.setLayout(detailLayoutLayout);
        detailLayoutLayout.setHorizontalGroup(
            detailLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(detailLayoutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(detailLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailLayoutLayout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 701, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailLayoutLayout.createSequentialGroup()
                        .addComponent(btnBackMainLayout)
                        .addGap(99, 99, 99)
                        .addComponent(btnDeleteTranDetail)
                        .addGap(256, 256, 256)))
                .addGroup(detailLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(detailLayoutLayout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(btnInsertTranDetail)
                        .addGap(62, 62, 62)
                        .addComponent(btnUpdateTranDetail))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        detailLayoutLayout.setVerticalGroup(
            detailLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailLayoutLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(detailLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 453, Short.MAX_VALUE))
                .addGap(57, 57, 57)
                .addGroup(detailLayoutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBackMainLayout)
                    .addComponent(btnInsertTranDetail)
                    .addComponent(btnUpdateTranDetail)
                    .addComponent(btnDeleteTranDetail))
                .addContainerGap(66, Short.MAX_VALUE))
        );

        mainLayout.add(detailLayout, "detailPanel");

        editPanel.setBackground(new java.awt.Color(255, 255, 255));

        btnBackLayout.setText("Back");
        btnBackLayout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackLayoutActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Thông tin phiếu nhập"));

        jLabel2.setText("AccountName: ");

        jLabel3.setText("BatchNumber :");

        jLabel4.setText("Supplier :");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(53, 53, 53)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(txtBatchNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(185, 185, 185)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(cbboxSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbboxSupplier, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(txtAccountName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(txtBatchNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Sản phẩm đã chọn"));

        tableChoosenProduct.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableChoosenProduct);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Danh sách sản phẩm"));

        tableDanhSachSP.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableDanhSachSP);

        btnAddTransaction_TransactionDetail.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnAddTransaction_TransactionDetail.setText("Tạo");
        btnAddTransaction_TransactionDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransaction_TransactionDetailActionPerformed(evt);
            }
        });

        btnChonSPThemVaoDS.setText("Chọn");
        btnChonSPThemVaoDS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChonSPThemVaoDSActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(btnAddTransaction_TransactionDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBackLayout)
                .addGap(80, 80, 80))
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 633, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnChonSPThemVaoDS)
                        .addGap(191, 191, 191))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 445, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(editPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnAddTransaction_TransactionDetail, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnChonSPThemVaoDS)
                        .addGap(143, 143, 143)
                        .addComponent(btnBackLayout)
                        .addGap(30, 30, 30))))
        );

        mainLayout.add(editPanel, "editPanel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLayout, javax.swing.GroupLayout.PREFERRED_SIZE, 1090, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainLayout, javax.swing.GroupLayout.DEFAULT_SIZE, 620, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void addDatePickerComponent() {
        // Tạo model và panel cho JDatePicker
        UtilDateModel model = new UtilDateModel();
        Properties p = new Properties();
        p.put("text.today", "Today");
        p.put("text.month", "Month");
        p.put("text.year", "Year");

        JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
        datePicker = new JDatePickerImpl(datePanel, new DateLabelFormatter());

        // Thêm JDatePicker vào JPanel đã tạo trong GUI Builder
        datePickerCreateDateTransactionPanel.setLayout(new java.awt.BorderLayout());
        datePickerCreateDateTransactionPanel.add(datePicker);
        datePickerCreateDateTransactionPanel.revalidate();
        datePickerCreateDateTransactionPanel.repaint();
    }
    // Lấy giá trị ngày từ JDatePicker
    
    public Date getSelectedDate() {

        if (datePicker.getModel().getValue() != null) {
            return (Date) datePicker.getModel().getValue();  // Lấy giá trị ngày từ model của datePicker
        }
        return null;
    }

    public void setDateToPicker(java.util.Date utilDate) {
        // Tạo một đối tượng Calendar và đặt ngày từ utilDate
        Calendar cal = Calendar.getInstance();
        cal.setTime(utilDate);
        // Gán giá trị cho model của datePicker
        datePicker.getModel().setDate(cal.get(Calendar.YEAR), cal.get(Calendar.MONTH), cal.get(Calendar.DAY_OF_MONTH));
        datePicker.getModel().setSelected(true);
    }

    
    
    
    public void fillDataTable(List<Transaction> trans)
    {
        DefaultTableModel tableModelTrans = (DefaultTableModel) tableTransaction.getModel();
        
        String[] columns = {"TransactionId","SupplierId","BatchNumber","TransactionType","CreateDate","AccountId","Total"};
        
        tableModelTrans.setDataVector(new Object[][]{}, columns);
        
        for(var tr : trans)
        {
            Object[] rowData = {tr.getTransactionId(),tr.getSupplierId(),tr.getBatchNumber(),tr.getTransactionType(),tr.getCreateDate(),tr.getAccountId(),tr.getTotal()};
            tableModelTrans.addRow(rowData);
        }
        
        
    }
    public void fillDataTableProduct()
    {
        DefaultTableModel tableModelPro = (DefaultTableModel) tableDanhSachSP.getModel();
        String[] columns = {"ProductId","ProductName","Unit","Price","CategoryId"};
        tableModelPro.setDataVector(new Object[][]{}, columns);
        
        for(var p : new ProductController().getAll())
        {
            Object[] rowData = {p.getProductId(),p.getProductName(),p.getUnit(),p.getPrice(),p.getCategoryId()};
            tableModelPro.addRow(rowData);
        }    
    }
    public void setupTableChoosen() {
        DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                new String[]{"ProductId", "Nhà Kho", "Kệ", "Số Lượng"}
        ) {
            @Override
            public Class<?> getColumnClass(int columnIndex) {
                switch (columnIndex) {
                    case 1: // Cột Nhà Kho
                        return JComboBox.class;
                    case 2: // Cột Kệ
                        return JComboBox.class;
                    case 3: // Cột Số Lượng
                        return JTextField.class;
                    default:
                        return String.class;
                }
            }

            @Override
            public boolean isCellEditable(int row, int column) {
                // Chỉ cho phép chỉnh sửa các cột Nhà Kho, Kệ, và Số Lượng
                return column == 1 || column == 2 || column == 3;
            }
        };

        tableChoosenProduct.setModel(model);
    }
    
    public void fillDataCbboxSupplier()
    {
        DefaultComboBoxModel cbboxSupplierModel = (DefaultComboBoxModel) this.cbboxSupplier.getModel();
        for(var s : new SupplierController().getAll())
        {
            cbboxSupplierModel.addElement(s.getSupplierName());
        }
    }
    
    public void fillDataCbboxSuppierInDefaultPanel()
    {
        DefaultComboBoxModel cbboxSupplierModel = (DefaultComboBoxModel) this.panelDefault_cbboxSupplier.getModel();
        cbboxSupplierModel.removeAllElements();
        for(var s : new SupplierController().getAll())
            cbboxSupplierModel.addElement(s.getSupplierName());
        
    }
    
    public void fillDataPanelDetailTransactionDetail()
    {
        DefaultComboBoxModel cbboxModelWareHouse = (DefaultComboBoxModel) panelTranDetail_cbboxWareHouse.getModel();
        cbboxModelWareHouse.removeAllElements();
        for(var w : new WareHouseController().getAll())
        {
            cbboxModelWareHouse.addElement(w.getWareHouseName());
        }
        String wareHouseName = (String) panelTranDetail_cbboxWareHouse.getSelectedItem();
        int wareHouseId = 0;
        for(var w : new WareHouseController().getAll())
            if(w.getWareHouseName().equals(wareHouseName))
            {
                wareHouseId = w.getWareHouseId();
                break;
            }
        
        DefaultComboBoxModel cbboxModelShelf = (DefaultComboBoxModel) panelTranDetail_cbboxShelf.getModel();
        cbboxModelShelf.removeAllElements();
        for(var s : new ShelfController().getByWareHouseId(wareHouseId))
            cbboxModelShelf.addElement(s.getShelfId());
        
        
        DefaultComboBoxModel cbboxModelProduct = (DefaultComboBoxModel) panelTranDetail_cbboxProduct.getModel();
        cbboxModelProduct.removeAllElements();
        for(var p : new ProductController().getAll())
            cbboxModelProduct.addElement(p.getProductName()); 
    }
    
    
    void fillDataTableTransactionDetailByTransactionId(int tranId)
    {
            List<TransactionDetail> tdts = new TransactionDetailController().getByTransactionId(tranId);
            
            DefaultTableModel tableModelTranDetailByTranId = (DefaultTableModel) tableTransactionDetailByTranId.getModel();
            
            String[] columns = {"TransactionDetailId","TransactionId","WareHouseId","ShelfId","ProductId","Quantity","Total","Status"};
            
            tableModelTranDetailByTranId.setDataVector(new Object[][]{}, columns);
            
            for(var tdt : tdts)
            {
                Object[] rowData = {tdt.getTransactionDetailId(),tdt.getTransactionId(),tdt.getWareHouseId(),tdt.getShelfId(),tdt.getProductId(),tdt.getQuantity(),tdt.getTotal(),tdt.isStatus()};
                tableModelTranDetailByTranId.addRow(rowData);
            }
    }
    
    
    private void btnPageInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPageInsertActionPerformed
        CardLayout c1 = (CardLayout) mainLayout.getLayout();
        c1.show(mainLayout, "editPanel");
    }//GEN-LAST:event_btnPageInsertActionPerformed

    private void btnPageDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPageDetailActionPerformed
        
        int selectedRow = tableTransaction.getSelectedRow();
        if(selectedRow != -1)
        {
            int tranId = Integer.parseInt(tableTransaction.getValueAt(selectedRow, 0).toString());
            panelTranDetail_txtTransactionId.setText(String.valueOf(tranId));
            panelTranDetail_txtTransactionId.setEnabled(false);
            
            fillDataTableTransactionDetailByTransactionId(tranId);
            
            fillDataPanelDetailTransactionDetail();
            
            CardLayout c1 = (CardLayout) mainLayout.getLayout();
            c1.show(mainLayout, "detailPanel");
            
        }
        else 
            JOptionPane.showMessageDialog(this, "Chưa chọn Transaction");
        
    }//GEN-LAST:event_btnPageDetailActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
       
    }//GEN-LAST:event_btnDeleteActionPerformed
    // edit Layout -> defaultLayout
    private void btnBackLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackLayoutActionPerformed
       CardLayout c1 = (CardLayout) mainLayout.getLayout();
       c1.show(mainLayout, "defaultPanel");
    }//GEN-LAST:event_btnBackLayoutActionPerformed

    // detail Layout -> defaultLayout
    private void btnBackMainLayoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackMainLayoutActionPerformed
        CardLayout c1 = (CardLayout) mainLayout.getLayout();
       c1.show(mainLayout, "defaultPanel");
    }//GEN-LAST:event_btnBackMainLayoutActionPerformed

    private void btnChonSPThemVaoDSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChonSPThemVaoDSActionPerformed
       
        int selectedRow = tableDanhSachSP.getSelectedRow();
        if (selectedRow != -1) {
            int maSp = (int) tableDanhSachSP.getValueAt(selectedRow, 0);
            try {
                // Lấy thông tin sản phẩm
                Product choosenPro = new ProductController().getById(maSp);

                // Lấy danh sách nhà kho và kệ
                List<WareHouse> whs = new WareHouseController().getAll();
                if (whs.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Không có nhà kho nào.");
                    return;
                }

                // Lấy danh sách tên nhà kho
                String[] warehouseNames = whs.stream().map(WareHouse::getWareHouseName).toArray(String[]::new);

                // Lấy danh sách kệ từ nhà kho đầu tiên
                int firstWarehouseId = whs.get(0).getWareHouseId();
                List<Shelf> initialShelves = new ShelfController().getByWareHouseId(firstWarehouseId);
                Integer[] initialShelfIds = initialShelves.stream().map(Shelf::getShelfId).toArray(Integer[]::new);

                // Dữ liệu mặc định: nhà kho đầu tiên, kệ đầu tiên, số lượng = 1
                String defaultWarehouse = warehouseNames[0];
                Integer defaultShelf = initialShelfIds.length > 0 ? initialShelfIds[0] : null;
                int defaultQuantity = 1;

                DefaultTableModel tableModelChoosenProducts = (DefaultTableModel) tableChoosenProduct.getModel();
                tableModelChoosenProducts.addRow(new Object[]{maSp, defaultWarehouse, defaultShelf, defaultQuantity});

                // Thiết lập ComboBox cho cột "Nhà kho"
                JComboBox<String> warehouseComboBox = new JComboBox<>(warehouseNames);
                tableChoosenProduct.getColumnModel().getColumn(1).setCellEditor(new DefaultCellEditor(warehouseComboBox));

                // Thiết lập ComboBox cho cột "Kệ"
                JComboBox<Integer> shelfComboBox = new JComboBox<>(initialShelfIds);
                tableChoosenProduct.getColumnModel().getColumn(2).setCellEditor(new DefaultCellEditor(shelfComboBox));

                warehouseComboBox.addActionListener(e -> {
                    int editingRow = tableChoosenProduct.getEditingRow();
                    if (editingRow != -1) {
                        // Lấy nhà kho được chọn
                        int selectedWarehouseIndex = warehouseComboBox.getSelectedIndex();
                        int selectedWarehouseId = whs.get(selectedWarehouseIndex).getWareHouseId();
                        // Lấy danh sách kệ mới từ nhà kho
                        List<Shelf> shelves = new ShelfController().getByWareHouseId(selectedWarehouseId);
                        shelfComboBox.removeAllItems();

                        // Cập nhật danh sách kệ mới
                        for (Shelf shelf : shelves) {
                            shelfComboBox.addItem(shelf.getShelfId());
                        }

                        // Đặt kệ mặc định là kệ đầu tiên
                        if (!shelves.isEmpty()) {
                            tableModelChoosenProducts.setValueAt(shelves.get(0).getShelfId(), editingRow, 2);
                        } else {
                            tableModelChoosenProducts.setValueAt(null, editingRow, 2);
                        }
                    }
                });

                
                tableChoosenProduct.getColumnModel().getColumn(3).setCellEditor(new DefaultCellEditor(new JTextField()));

            } catch (SQLException ex) {
                Logger.getLogger(PanelQLNhap.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Chưa chọn sản phẩm");
        }
          
    }//GEN-LAST:event_btnChonSPThemVaoDSActionPerformed

    private void btnAddTransaction_TransactionDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransaction_TransactionDetailActionPerformed

        float batchNumber = Float.parseFloat(txtBatchNumber.getText());
        String supplierName = String.valueOf(cbboxSupplier.getSelectedItem());
        int supplierId = 0;
        for(var s : new SupplierController().getAll())
            if(supplierName.equals(s.getSupplierName()))
            {
                supplierId = s.getSupplierId();
                break;
            }
        LocalDate date = LocalDate.now();
        Date utilDate = Date.from(date.atStartOfDay(ZoneId.systemDefault()).toInstant());
        Transaction t = new Transaction(supplierId, batchNumber,"Import", utilDate ,SessionManager.getInstance().getAccountId() , 0);
        if(new TransactionController().Insert(t))
        {
            // Nếu Transaction được lưu thành công, tiếp tục xử lý chi tiết
            DefaultTableModel model = (DefaultTableModel) tableChoosenProduct.getModel();
            int rowCount = model.getRowCount();
            int tranId = new TransactionController().getTransactionJustInsert(supplierId, batchNumber, supplierName, SessionManager.getInstance().getAccountId());
            // Lặp qua các hàng trong bảng tableChoosen
            for (int i = 0; i < rowCount; i++) {
                int productId = Integer.parseInt(model.getValueAt(i, 0).toString()) ; // Cột 0: Product ID
                String warehouseName =  model.getValueAt(i, 1).toString(); // Cột 1: Warehouse Name
                int shelfId = Integer.parseInt(model.getValueAt(i, 2).toString()); // Cột 2: Shelf ID
                int quantity = Integer.parseInt(model.getValueAt(i, 3).toString()); // Cột 3: Quantity

                int warehouseId = 0;
                for (var wh : new WareHouseController().getAll()) {
                    if (warehouseName.equals(wh.getWareHouseName())) {
                        warehouseId = wh.getWareHouseId();
                        break;
                    }
                }      
                
                // Tạo TransactionDetail
                 // Phải lấy ra transactionId vừa tạo
                System.out.println("TranId = "+tranId);
                TransactionDetail detail = new TransactionDetail(tranId, warehouseId, shelfId,productId, quantity,0,false);

                // Insert TransactionDetail 
                if (!new TransactionDetailController().Insert(detail)) 
                    JOptionPane.showMessageDialog(this, "Insert TransactionDetail failed for row " + (i + 1));
                
            }

            JOptionPane.showMessageDialog(this, "Insert Transaction and Details successfully!");
        }
        else
            JOptionPane.showMessageDialog(this, "Insert Transaction Fail");
    }//GEN-LAST:event_btnAddTransaction_TransactionDetailActionPerformed
    
    
    private void btnInsertTranDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertTranDetailActionPerformed
        int tranId = Integer.parseInt(panelTranDetail_txtTransactionId.getText());
        String wareHouseName = String.valueOf(panelTranDetail_cbboxWareHouse.getSelectedItem());
        int wareHouseId = 0;
        for(var w : new WareHouseController().getAll())
            if(w.getWareHouseName().equals(wareHouseName))
            {
                wareHouseId = w.getWareHouseId();
                break;
            }
        
        int shelfId = Integer.parseInt(panelTranDetail_cbboxShelf.getSelectedItem().toString());
        String proName = String.valueOf(panelTranDetail_cbboxProduct.getSelectedItem());
        List<Product> pros = new ProductController().getAll();
        int proId = 0;
        for(var p : pros)
            if(p.getProductName().equals(proName))
            {
                proId = p.getProductId();
                break;
            }
        float unitPrice = 0;
        for(var p : pros)
        {
            if(p.getProductId() == proId)
            {
                unitPrice = p.getPrice();
                break;
            }
        }
        int quantity = Integer.parseInt(panelTranDetail_txtQuantity.getText());
        boolean status = Boolean.parseBoolean(panelTranDetail_cbboxStatus.getSelectedItem().toString());
        TransactionDetail tdt = new TransactionDetail(tranId, wareHouseId, shelfId, proId, quantity, unitPrice * quantity, status);
        if(new TransactionDetailController().Insert(tdt))
        {
            JOptionPane.showMessageDialog(this, "Insert TransacionDetail Success");
            fillDataTableTransactionDetailByTransactionId(tranId);
            
        }
        else
            JOptionPane.showMessageDialog(this, "Insert TransacionDetail Fail");
        
        
        
    }//GEN-LAST:event_btnInsertTranDetailActionPerformed

    private void btnUpdateTranDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTranDetailActionPerformed
        int selectedRow = this.tableTransactionDetailByTranId.getSelectedRow();
        if(selectedRow != -1)
        {
            int tranDetailId = (int) tableTransactionDetailByTranId.getValueAt(selectedRow, 0);
            int tranId = Integer.parseInt(panelTranDetail_txtTransactionId.getText());
            int quatity = Integer.parseInt(panelTranDetail_txtQuantity.getText());
            String wareHouseName = String.valueOf(panelTranDetail_cbboxWareHouse.getSelectedItem());
            int wareHouseId = 0;
            for (var w : new WareHouseController().getAll()) {
                if (w.getWareHouseName().equals(wareHouseName)) {
                    wareHouseId = w.getWareHouseId();
                    break;
                }
            }

            int shelfId = Integer.parseInt(panelTranDetail_cbboxShelf.getSelectedItem().toString());
            String proName = String.valueOf(panelTranDetail_cbboxProduct.getSelectedItem());
            List<Product> pros = new ProductController().getAll();
            int proId = 0;
            for (var p : pros) {
                if (p.getProductName().equals(proName)) {
                    proId = p.getProductId();
                    break;
                }
            }
            float unitPrice = 0;
            for (var p : pros) {
                if (p.getProductId() == proId) {
                    unitPrice = p.getPrice();
                    break;
                }
            }
            boolean status = Boolean.parseBoolean(String.valueOf(panelTranDetail_cbboxStatus.getSelectedItem()));
            
            TransactionDetail tdtUpdate = new TransactionDetail(tranDetailId, tranId, wareHouseId, shelfId, proId, quatity, quatity * unitPrice, status);
            
            if(new TransactionDetailController().Update(tdtUpdate))
            {
                fillDataTableTransactionDetailByTransactionId(tranId);
                JOptionPane.showMessageDialog(this, "Update TransactionDetail Success");
            }
            else
                JOptionPane.showMessageDialog(this, "Update TransactionDetail Fail");
            
        }
        else
            JOptionPane.showMessageDialog(this, "Chưa chọn TransactionDetail để sửa");
    }//GEN-LAST:event_btnUpdateTranDetailActionPerformed

    private void btnDeleteTranDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTranDetailActionPerformed
        int selectedRow = this.tableTransactionDetailByTranId.getSelectedRow();
        if(selectedRow != -1)
        {
            int tranDetailId = (int) tableTransactionDetailByTranId.getValueAt(selectedRow, 0);
            TransactionDetail tdtChoosen1 = new TransactionDetailController().getById(tranDetailId);
            if(new TransactionDetailController().Delete(tranDetailId))
            {
                int tranId1 = tdtChoosen1.getTransactionId();
                System.out.println("TranId "+tranId1);
                fillDataTableTransactionDetailByTransactionId(tranId1);
                JOptionPane.showMessageDialog(this, "Delete TransactionDetail Success");
            }
            else
                JOptionPane.showMessageDialog(this, "Delete TransactionDetail Fail");
        }else
            JOptionPane.showMessageDialog(this, "Chưa chọn TransactionDetail để xóa");
    }//GEN-LAST:event_btnDeleteTranDetailActionPerformed

    private void panelTranDetail_cbboxWareHouseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panelTranDetail_cbboxWareHouseActionPerformed
        String wareHouseName = String.valueOf(panelTranDetail_cbboxWareHouse.getSelectedItem());
        int whId = 0;
        for(var w : new WareHouseController().getAll())
            if(w.getWareHouseName().equals(wareHouseName))
            {
                whId = w.getWareHouseId();
                break;
            }
        DefaultComboBoxModel cbboxModelShelf = (DefaultComboBoxModel) panelTranDetail_cbboxShelf.getModel();
        cbboxModelShelf.removeAllElements();
        for(var s : new ShelfController().getByWareHouseId(whId))
            cbboxModelShelf.addElement(s.getShelfId());
        
    }//GEN-LAST:event_panelTranDetail_cbboxWareHouseActionPerformed

    private void tableTransactionDetailByTranIdMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTransactionDetailByTranIdMouseClicked
       int selectedRow = this.tableTransactionDetailByTranId.getSelectedRow();
       int tranDetailId = (int) tableTransactionDetailByTranId.getValueAt(selectedRow, 0);
       
       TransactionDetail tdtChoosen = new TransactionDetailController().getById(tranDetailId);
       
       panelTranDetail_txtTransactionId.setText(String.valueOf(tdtChoosen.getTransactionId()));
       panelTranDetail_txtQuantity.setText(String.valueOf(tdtChoosen.getQuantity()));
       int proId = tdtChoosen.getProductId();
       int whId = tdtChoosen.getWareHouseId();
       int sId = tdtChoosen.getShelfId();
       panelTranDetail_cbboxShelf.setSelectedItem(sId);
       
       String proName = "";
       for(var p : new ProductController().getAll())
           if(p.getProductId() == proId)
           {
               proName = p.getProductName();
               break;
           }
       String whName = "";
       for(var w : new WareHouseController().getAll())
       {
           if(w.getWareHouseId() == whId)
           {
               whName = w.getWareHouseName();
               break;
           }
       }
       panelTranDetail_cbboxProduct.setSelectedItem(proName);
       panelTranDetail_cbboxWareHouse.setSelectedItem(whName);
       
    }//GEN-LAST:event_tableTransactionDetailByTranIdMouseClicked

    private void btnUpdateTransactionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateTransactionActionPerformed
        int selectedRow = (tableTransaction.getSelectedRow());
        int tranID = (int) this.tableTransaction.getValueAt(selectedRow, 0);
        String supName = (String) panelDefault_cbboxSupplier.getSelectedItem();
        int supId = 0;
        for(var s : new SupplierController().getAll())
        {
            if(s.getSupplierName().equals(supName))
            {
                supId = s.getSupplierId();
                break;
            }
        }
        float batchNum = Float.parseFloat(panelDefault_txtBatchNumber.getText());
        String tranType = panelDefault_txtTransactionType.getText();
        Date createDate = getSelectedDate();
        int accId = Integer.parseInt(panelDefault_txtAccount.getText());
        float total = Float.parseFloat(panelDefault_txtTotal.getText());
        Transaction t = new Transaction(tranID, supId, batchNum, tranType, createDate, accId, total);
        if(new TransactionController().Update(t))
        {
            JOptionPane.showMessageDialog(this, "Update Transaction Success");
            fillDataTable(new TransactionController().getAll());
        }
        else 
            JOptionPane.showMessageDialog(this, "Update Transaction Fail");
        
    }//GEN-LAST:event_btnUpdateTransactionActionPerformed

    private void tableTransactionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableTransactionMouseClicked
        int selectedRow = (tableTransaction.getSelectedRow());
        int tranID = (int) this.tableTransaction.getValueAt(selectedRow, 0);
        Transaction t = new TransactionController().getById(tranID);
        int supId = t.getSupplierId();
        String supName = "";
        for(var s : new SupplierController().getAll())
        {
            if(s.getSupplierId() == supId)
            {
                supName = s.getSupplierName();
                break;
            }
        }
        System.out.println(supName);
        panelDefault_cbboxSupplier.setSelectedItem(supName);
        
        panelDefault_txtAccount.setText(String.valueOf(t.getAccountId()));
        panelDefault_txtBatchNumber.setText(String.valueOf(t.getBatchNumber()));
        panelDefault_txtTotal.setText(String.valueOf(t.getTotal()));
        panelDefault_txtTransactionType.setText(String.valueOf(t.getTransactionType()));
        setDateToPicker(t.getCreateDate());
        
    }//GEN-LAST:event_tableTransactionMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddTransaction_TransactionDetail;
    private javax.swing.JButton btnBackLayout;
    private javax.swing.JButton btnBackMainLayout;
    private javax.swing.JButton btnChonSPThemVaoDS;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnDeleteTranDetail;
    private javax.swing.JButton btnInsertTranDetail;
    private javax.swing.JButton btnPageDetail;
    private javax.swing.JButton btnPageInsert;
    private javax.swing.JButton btnUpdateTranDetail;
    private javax.swing.JButton btnUpdateTransaction;
    private javax.swing.JComboBox<String> cbboxSupplier;
    private javax.swing.JPanel datePickerCreateDateTransactionPanel;
    private javax.swing.JPanel defaultLayout;
    private javax.swing.JPanel detailLayout;
    private javax.swing.JPanel editPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPanel mainLayout;
    private javax.swing.JComboBox<String> panelDefault_cbboxSupplier;
    private javax.swing.JTextField panelDefault_txtAccount;
    private javax.swing.JTextField panelDefault_txtBatchNumber;
    private javax.swing.JTextField panelDefault_txtTotal;
    private javax.swing.JTextField panelDefault_txtTransactionType;
    private javax.swing.JComboBox<String> panelTranDetail_cbboxProduct;
    private javax.swing.JComboBox<String> panelTranDetail_cbboxShelf;
    private javax.swing.JComboBox<String> panelTranDetail_cbboxStatus;
    private javax.swing.JComboBox<String> panelTranDetail_cbboxWareHouse;
    private javax.swing.JTextField panelTranDetail_txtQuantity;
    private javax.swing.JTextField panelTranDetail_txtTransactionId;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable tableChoosenProduct;
    private javax.swing.JTable tableDanhSachSP;
    private javax.swing.JTable tableTransaction;
    private javax.swing.JTable tableTransactionDetailByTranId;
    private javax.swing.JTextField txtAccountName;
    private javax.swing.JTextField txtBatchNumber;
    // End of variables declaration//GEN-END:variables
}
